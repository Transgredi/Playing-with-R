liczbaPtakow <- 0
# w pętli będziemy zmieniać wartość zmiennych w zależności od tego
# czy kolejny wiersz opisuje koty czy ptaki
for (i in 1:nrow(koty_ptaki)) {
if (koty_ptaki[i,"druzyna"] == "Kot") {
liczbaKotow  <- liczbaKotow + 1
} else {
liczbaPtakow <- liczbaPtakow + 1
}
}
# zliczamy ile było kotów i ptaków
liczbaKotow
setwd("~/Documents/Developers/Programming/R/pogromcydanych/")
getwd()
koty_ptaki <- read.table("koty_ptaki.csv",
sep=";", dec=",", header=TRUE)
rysuj_kropki <- function(n_kropek) {
# w pętli rysujemy n_kropek
for (j in 1:n_kropek) {
cat(".")
}
}
rysuj_kropki(n_kropek = 30)
rysuj_kropki(n_kropek = 102)
rysuj_kropki
rysuj_kropki()
rysuj_kropki <- function(n_kropek = 20) {
# w pętli rysujemy n_kropek
for (j in 1:n_kropek) {
cat(".")
}
}
rysuj_kropki()
rysuj_kropki(0)
length(n_kropek)
length(1:n_kropek)
length(1:0)
rysuj_kropki <- function(n_kropek = 20) {
# czy liczba kropek do wyświetlenia jest większa niż zero?
if (n_kropek > 0) {
for (j in 1:n_kropek) {
cat(".")
}
}
}
rysuj_kropki(0)
rysuj_kropki_3 <- function(n_kropek = 20, znak = ".") {
if (n_kropek > 0) {
for (j in 1:n_kropek) {
cat(znak)
}
}
}
rysuj_kropki_3(20, "*")
rysuj_kropki_3(20, "$")
rysuj_kropki_3(20, "$_")
rysuj_kropki_3(20, "^ ^")
rysuj_kropki_1 <- function(n_kropek = 20) {
# w pętli rysujemy n_kropek
for (j in 1:n_kropek) {
cat(".")
}
}
rysuj_kropki_2 <- function(n_kropek = 20) {
# czy liczba kropek do wyświetlenia jest większa niż zero?
if (n_kropek > 0) {
for (j in 1:n_kropek) {
cat(".")
}
}
}
rysuj_kropki_3 <- function(n_kropek = 20, znak = ".") {
if (n_kropek > 0) {
for (j in 1:n_kropek) {
cat(znak)
}
}
}
rysuj_wykres_kropkowy<- function(nazwy, wartosci) {
# zakładamy, że oba wektory są tej samej długości
# funkcja seq_along(nazwy) tworzy sekwencję od 1 do długości wektora nazwy
for (i in seq_along(nazwy)) {
rysuj_kropki_1(wartosci[i])
cat(" ", nazwy[i],"\n")
}
}
rysuj_wykres_kropkowy(koty_ptaki$gatunek, koty_ptaki$predkosc/5)
koty_ptaki$gatunek <- as.character(koty_ptaki$gatunek)
rysuj_wykres_kropkowy(koty_ptaki$gatunek, koty_ptaki$predkosc/5)
rysuj_wykres_kropkowy(koty_ptaki$waga, koty_ptaki$predkosc/5)
rysuj_wykres_kropkowy(koty_ptaki$habitat, koty_ptaki$predkosc/5)
rysuj_wykres_kropkowy(koty_ptaki$gatunek, koty_ptaki$predkosc)
rysuj_wykres_kropkowy <- function(nazwy, wartosci) {
# czy oba argumenty mają równą długość?
if (length(nazwy) != length(wartosci)) {
# funkcja stop() przerywa działanie funkcji
stop("Argumenty mają różną długość! ", length(nazwy), " oraz ", length(wartosci))
}
# jeżeli wszystkie warunki są spełnione to można kontynuować wykonanie funkcji
for (i in seq_along(nazwy)) {
rysuj_kropki(wartosci[i])
cat(" ", nazwy[i],"\n")
}
}
rysuj_wykres_kropkowy(koty_ptaki$gatunek, 32)
rysuj_wykres_kropkowy <- function(nazwy, wartosci, ...) {
for (i in seq_along(nazwy)) {
rysuj_kropki(wartosci[i], ...)
cat(" ", nazwy[i],"\n")
}
}
rysuj_wykres_kropkowy(nazwy = LETTERS[1:5], wartosci = 1:5, znak = "X")
rysuj_wykres_kropkowy <- function(nazwy, wartosci, ...) {
for (i in seq_along(nazwy)) {
rysuj_kropki_3(wartosci[i], ...)
cat(" ", nazwy[i],"\n")
}
}
# Zilustrujmy to na przykładzie.
# Wywołujemy rysuj_wykres_kropkowy() z trzema argumentami,
# trzeci, czyli znak = "X" zostanie przekazany do rysuj_kropki()
# dzięki czemu na wykresie pojawią się znaki X.
rysuj_wykres_kropkowy(nazwy = LETTERS[1:5], wartosci = 1:5, znak = "X")
suma_n_liczb_losowych <- function(n = 10) {
if (n < 1) {
return(0)
}
sum(runif(n))
}
suma_n_liczb_losowych()
suma_n_liczb_losowych(10)
suma_n_liczb_losowych(0)
suma_n_liczb_losowych(1)
suma_n_liczb_losowych(-1)
data(package = "PogromcyDanych")
help(library)
install.packages("dplyr")
library(dplyr)
library(dplyr, help)
library(help = dplyr)
install.packages("swirld")
install.packages("swirl")
library(swirl)
rm(ls())
rm(list = ls())
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Open Intro")
install_from_swirl("Regression Models")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Statistical Inference")
...
exit
exit()
swirl()
library(PogromcyDanych)
head(koty_ptaki)
sort(koty_ptaki$waga)
koty_ptaki[sort(koty_ptaki$waga)]
koty_ptaki[sort(koty_ptaki$waga),]
koty_ptaki[,sort(koty_ptaki$waga)]
koty_ptaki[order(koty_ptaki$waga),]
koty_ptaki[order(koty_ptaki$waga, decreasing = T),]
head(auta2012)
head(auta2012, 3)
str(auta2012)
colnames(auta2012)
mean(auta2012$Cena)
mean(auta2012$Cena.w.PLN)
?auta2012
nrow(auta2012)
hist(auta2012$Cena.w.PLN, breaks = 20)
hist(auta2012$Cena.w.PLN, breaks = 200)
hist(auta2012$Cena.w.PLN/1000, breaks = 200)
min(auta2012$Cena.w.PLN)
max(auta2012$Cena.w.PLN)
max(auta2012$Cena.w.PLN)/1000
max(auta2012$Cena.w.PLN)/10e
max(auta2012$Cena.w.PLN)/10e1
max(auta2012$Cena.w.PLN)/10e2
10e1
10e0
10e-1
6e1
6e2
6.422e2
6.422e1
range(auta2012$Cena.w.PLN)
boxplot(auta2012$Cena.w.PLN)
boxplot(auta2012$Cena.w.PLN, log = T)
boxplot(auta2012$Cena.w.PLN, outline = F)
quantile(auta2012$Cena.w.PLN, c(0.01, 0.1, 0.25, 0.5, 0.75, 0.90, 0.99))
cor(auta2012$Cena.w.PLN, auta2012$Cena)
cor(auta2012$Cena.w.PLN, auta2012$Przebieg.w.km)
cor(auta2012$Cena.w.PLN, auta2012$KM)
head(auta2012$KM)
cor(auta2012$Cena.w.PLN, auta2012$KM, na.omit = T)
cor(auta2012$Cena.w.PLN, auta2012$KM, na.exclude = T)
cor(auta2012$Cena.w.PLN, auta2012$Rok.produkcji)
cor(auta2012$Cena.w.PLN, auta2012$Rok.produkcji, na.rm = T)
srednie <- tapply(auta2012$Cena.w.PLN, auta2012$Rodzaj.paliwa, mean)
barplot(srednie, las = 2)
barplot(srednie, las = 1)
barplot(srednie/10e2, las = 1)
barplot(srednie/10e2, las = 3)
barplot(srednie/10e2, las = 4)
barplot(srednie/10e2, las = 4)
barplot(srednie/10e2, las = 2)
srednie <- tapply(auta2012$Przebieg.w.km, auta2012$Rodzaj.paliwa, mean)
barplot(srednie/10e2, las = 2)
srednie <- tapply(auta2012$Przebieg.w.km, auta2012$Rodzaj.paliwa, mean)
barplot(srednie, las = 2)
srednie <- tapply(auta2012$Cena.w.PLN, auta2012$Rodzaj.paliwa, mean)
barplot(srednie/10e2, las = 2)
srednie2 <- tapply(auta2012$Przebieg.w.km, auta2012$Rodzaj.paliwa, mean)
barplot(srednie, las = 2)
srednie2 <- tapply(auta2012$Przebieg.w.km, auta2012$Rodzaj.paliwa, mean)
barplot(srednie2, las = 2)
srednie2 <- tapply(auta2012$Przebieg.w.km/10e2, auta2012$Rodzaj.paliwa, mean)
barplot(srednie2, las = 2)
srednie <- tapply(auta2012$Cena.w.PLN, auta2012$Rodzaj.paliwa, mean, na.rm = T)
barplot(srednie/10e2, las = 2)
boxplot(auta2012$Przebieg.w.km, horizontal = T, range = 0)
2e+2
1e+2
1e2
1e9
1e+9
1e+8
1e+7
1e+6
1e+5
1e+4
auta2012wybrane <- auta2012[auta2012$Przebieg.w.km < 1000000, ]
summary(auta2012wybrane$Przebieg.w.km)
boxplot(auta2012wybrane$Przebieg.w.km, horizontal=TRUE, range=0)
hist(auta2012wybrane, col = "red")
hist(auta2012wybrane$Przebieg.w.km, col = "red")
hist(auta2012wybrane$Przebieg.w.km, col = "red", breaks = 200)
plot(auta2012wybrane$Przebieg.w.km, auta2012wybrane$Cena.w.PLN, log="xy", pch=".")
plot(auta2012wybrane$Przebieg.w.km, auta2012wybrane$Cena.w.PLN, pch=".")
table(koty_ptaki)
table(koty_ptaki$gatunek)
table(koty_ptaki$waga)
table(koty_ptaki$gatunek, koty_ptaki$waga)
koty_ptaki
table(koty_ptaki$druzyna)
1e102
1021323123123
1e+2
2e+2
2.21231e+2
1e+2
1e+1
1e+0
1e+-1
1e-1
.8e-1
0.8 - .1
0.8 + 10^-1
0.8 + 10^-2
0.8 + 10^-`
0.8 + 10^-`
0.8 + 10^-1
10^-1
.8e-1
0.8 * 10^-1
0.8 * 10^1
8 * 10^2
8 * 10^1
8 * 10^0
8 * 10^-1
8 * 10^-2
glimpse(auta2012)
levels(auta2012$Waluta)
summary(auta2012$Waluta)
table(auta2012$Waluta)
table(auta2012$Waluta, useNA = "always")
waluty <- auta2012$Waluta
prop.table(waluty)
waluty <- table(auta2012$Waluta)
waluty
prop.table(waluty)
frakcje <- prop.table(waluty)
frakcje
round(frakcje)
round(frakcje, 2)
frakcje <- prop.table(waluty)
procenty <- round(frakcje * 100, 2)
procenty
procenty_s <- sort(procenty)
procenty_s
procenty_s <- sort(procenty, decreasing = T)
procenty_s
sortVector <- order(procenty)
sortVector
procenty[sortVector]
procenty[rev(sortVector)]
waluty <- table(auta2012$Waluta)
waluty
barplot(waluty)
waluty_s <- sort(waluty)
waluty_s
barplot(waluty_s, horiz = TRUE, las = 1)
?str
help(str)
table(auta2012$Kraj.pochodzenia, auta2012$Waluta)
krajWaluta <- xtabs( ~ Kraj.pochodzenia + Waluta, auta2012)
krajWaluta
round(prop.table(krajWaluta, 1), 3)
round(prop.table(krajWaluta, 2), 3)
round(prop.table(krajWaluta, 0), 3)
round(prop.table(krajWaluta, 1), 1)
round(prop.table(krajWaluta, 1), 2)
round(prop.table(krajWaluta, 1), 3)
round(prop.table(krajWaluta, 1), 3)
round(prop.table(krajWaluta, 1), 3)
xt <- xtabs(~ Kraj.pochodzenia + Waluta, auta2012)
as.data.frame(xt)
xt(xt$Frex > 0)
xt <- as.data.frame(xt)
xt[xt$Frex > 0]
xt[xt$Frex > 0, ]
xt <- xtabs(~ Kraj.pochodzenia + Waluta, auta2012)
xt <- as.data.frame(xt)
xt[xt$Frex > 0, ]
xt[, xt$Frex > 0 ]
xt <- xtabs(~Kraj.pochodzenia+Waluta, auta2012)
xt <- as.data.frame(xt)
# Wyświetlmy tylko te kombinacje, które rzeczywiście występują w danych:
xt[xt$Freq > 0, ]
xt[xt$Freq > 0, ]
sort(xt)
sort(xt$Freq)
xt[order(xt$Freq)]
xt[order(xt$Freq),]
xt[rev(order(xt$Freq)),]
glimpse(swiss)
koty_ptaki$waga
koty_ptaki$wagaKategoria <- cut(koty_ptaki$waga, c(0, 1, 10, 100, 1000))
koty_ptaki$wagaKategoria
koty_ptaki
koty_ptaki$wagaKategoria <- cut(koty_ptaki$waga, c(0, 1, 10, 100))
koty_ptaki
table(koty_ptaki$wagaKategoria)
koty_ptaki$wagaKategoria <- cut(koty_ptaki$waga, c(0, 1, 10, 100, 1000))
table(koty_ptaki$wagaKategoria)
xtabs(koty_ptaki$wagaKategoria)
table(koty_ptaki$wagaKategoria)
xtabs(~druzyna + wagaKategoria, koty_ptaki)
xtabs(druzyna + wagaKategoria, koty_ptaki)
xtabs(~druzyna + wagaKategoria, koty_ptaki)
druzynaWaga <- xtabs(~druzyna + wagaKategoria, koty_ptaki)
druzynaWaga <- xtabs(~druzyna + wagaKategoria, koty_ptaki)
mosaicplot(druzynaWaga)
mosaicplot(druzynaWaga, las = 2)
levels(auta2012$Rodzaj.paliwa)
boxplot(Rok.produkcji ~ Rodzaj.paliwa, auta2012, las = 2)
levels(auta2012$Rodzaj.paliwa)
boxplot(Rok.produkcji ~ Rodzaj.paliwa, auta2012)
levels(auta2012$Skrzynia.biegow)
auta2012$Skrzynia.biegow2 <- factor(auta2012$Skrzynia.biegow,
levels=c("manualna","", "automatyczna"))
levels(auta2012$Skrzynia.biegow2)
# Tak jak się można spodziewać, bardziej ,,nowoczesne’’ paliwa są w autach młodszych.
auta2012$Rodzaj.paliwa.posortowany <- reorder(auta2012$Rodzaj.paliwa,
auta2012$Rok.produkcji,
mean)
boxplot(Rok.produkcji ~ Rodzaj.paliwa.posortowany, auta2012, las=2)
auta2012$Rodzaj.paliwa.posortowany <- reorder(auta2012$Rodzaj.paliwa,
auta2012$Rok.produkcji,
mean)
boxplot(Rok.produkcji ~ Rodzaj.paliwa.posortowany, auta2012)
auta2012$Rok.produkcji.2 <- cut(auta2012$Rok.produkcji, c(1900, 1990,
1991, 1995,
1996, 2000,
2001, 2005,
2006, 2010,
2011, 2012))
auta2012
dim(auta2012)
glimpse(2012)
glimpse(auta2012)
table(auta2012$Rok.produkcji.2)
outer(1,2, "+")
TRUE_FALSE_NA <- c(TRUE, FALSE, NA)
TRUE_FALSE_NA
tabliczka_dodawania <- outer(TRUE_FALSE_NA, TRUE_FALSE_NA, "|")
tabliczka_dodawania
to_kot <- koty_ptaki$druzyna == 'kot'
ciezki_kot <- koty_ptaki$waga >= 10
table(to_kot, ciezki_kot)
to_kot <- koty_ptaki$druzyna == 'Kot'
ciezki_kot <- koty_ptaki$waga >= 10
table(to_kot, ciezki_kot)
prop.table(c(10,20))
prop.table(c(10,1))
prop.table(c(10,10))
prop.table(c(10,10, 2))
prop.table(c(10,10,2), c(2,3))
koty_ptaki$habitat_napis <- as.character(koty_ptaki$habitat)
koty_ptaki$habitat_napis %in% c("Azka")
koty_ptaki$habitat_napis %in% c("Azja")
which(koty_ptaki$habitat_napis %in% c("Azja"))
grep("A", koty_ptaki)
koty_ptaki[9,]
grep("A", koty_ptaki$habitat_napis)
grep("A", koty_ptaki$habitat_napis, value = T)
grep("^[AE]", koty_ptaki$habitat_napis, value = T)
auta2012$Kolor_napis <- as.character(auta2012$Kolor)
auta2012$Wyposazenie.dodatkowe_napis <- as.character(auta2012$Wyposazenie.dodatkowe)
table(auta2012$Kolor)
table(auta2012$Kolor_napis)
prop.table(table(auta2012$Kolor))
prop.table(auta2012$Kolor)
prop.table(table(auta2012$Kolor))
prop.table(table(auta2012$Kolor)) * 100
round(prop.table(table(auta2012$Kolor)) * 100)
round(prop.table(table(auta2012$Kolor)) * 100, 2)
auta2012$czy_metallic <- grepl("metallic", auta2012$Kolor_napis)
round(prop.table(table(auta2012$czy_metallic)) * 100, 2)
(prop.table(table(auta2012$czy_metallic))
)
auta2012$maKlimatyzacje <- grepl("klimatyzacja", auta2012$Wyposazenie.dodatkowe_napis)
table(auta2012$maKlimatyzacje)
table(auta2012$czy_metallic)
auta2012$szyby <- grepl(x=auta2012$Wyposazenie.dodatkowe_napis,
pattern="przyciemniane szyby")
table(auta2012$szyby)
litery <- LETTERS[1:10]
cyfry  <- 1:10
paste(litery, cyfry, ".")
paste(litery, cyfry, ".", sep="-")
# Funkcja paste0() tym różni się od funkcji paste(),
# że separator jest pustym napisem.
paste0(litery, cyfry, ".")
?imiona_warszawa
imiona_chlopcow <- imiona_warszawa[imiona_warszawa$plec == "M", ]
same_imiona     <- unique(imiona_chlopcow$imie)
grep("a$", same_imiona, value = TRUE)
imiona_chlopcow <- imiona_warszawa[imiona_warszawa$plec == "M", ]
same_imiona     <- unique(imiona_chlopcow$imie)
grep("n$", same_imiona, value = TRUE)
imiona_dziewczat <- imiona_warszawa[imiona_warszawa$plec == "K", ]
same_imiona      <- unique(imiona_dziewczat$imie)
grep("[^a]$", same_imiona, value = TRUE)
grep("[^a]", same_imiona, value = TRUE)
grep("[a]$", same_imiona, value = TRUE)
imiona_chlopcow <- imiona_warszawa[imiona_warszawa$plec == "M", ]
same_imiona     <- unique(imiona_chlopcow$imie)
grep("[a]$", same_imiona, value = TRUE)
grep("[^a]$", same_imiona, value = TRUE)
# wszystkie litery poza a
imiona_dziewczat <- imiona_warszawa[imiona_warszawa$plec == "K", ]
same_imiona      <- unique(imiona_dziewczat$imie)
grep("[^a]$", same_imiona, value = TRUE)
table(grep("[^a]$", imiona_dziewczat, value = TRUE))
head(imiona_dziewczat)
table(grep("[^a]$", imiona_dziewczat[imiona_dziewczat$liczba > 0], value = TRUE))
imiona_dziewczat[imiona_dziewczat$liczba > 0,]
imiona_f <- table(grep("[^a]$", imiona_dziewczat[imiona_dziewczat$liczba > 0,],
value = TRUE))
head(imiona_f)
imiona_f <- (grep("[^a]$", imiona_dziewczat[imiona_dziewczat$liczba > 0,],
value = TRUE))
head(imiona_f)
imiona_dziewczat[imiona_dziewczat$liczba > 0,]
imiona_f <- imiona_dziewczat[imiona_dziewczat$liczba > 0, ]
head(imiona_f)
imiona_f <- grep("[^a]$", imiona_dziewczat[imiona_dziewczat$liczba > 0,],
value = TRUE)
str(imiona_f)
aggregate(liczba ~ imie, data = imiona_f, sum)
str(imiona_f)
class(imiona_f)
str(imiona_warszawa)
imiona_f <- imiona_dziewczat[imiona_dziewczat$liczba > 0, ]
aggregate(liczba ~ imie, data = imiona_f, sum)
sort(aggregate(liczba ~ imie, data = imiona_f, sum))
aggregate(liczba ~ imie, data = imiona_f, sum)
order(aggregate(liczba ~ imie, data = imiona_f, sum))
aggregate(liczba ~ imie, data = imiona_f, sum)[order(liczba),]
imona_f_sum <- aggregate(liczba ~ imie, data = imiona_f, sum)
imona_f_sum[order(liczba),]
imiona_f_sum <- aggregate(liczba ~ imie, data = imiona_f, sum)
imiona_f_sum
str(imiona_f_sum)
imona_f_sum[order(imiona_f_sum$liczba),]
as.Date("2015-02-22")
as.Date("02/22/2015", format = "%m/%d/%Y")
czas1 <- as.POSIXct("2015-02-13 12:56:26")
czas2 <- as.POSIXct("14022015 12:56:26", format = "%d%m%Y %H:%M:%S")
czas1 - czas2
czas2 - czas1
Sys.time()
czas1 <- as.POSIXlt("2015-02-13 12:56:26")
czas2 <- as.POSIXlt("14022015 12:56:26", format = "%d%m%Y %H:%M:%S")
czas1 - czas2
t <- czas2 - czas1
t
czas1$sec
czas1$min
czas$hour
czas1$h
czas1$zone
czas1 + 30
czas1
install.packages("lubridate")
library(lubridate)
now()
today()
